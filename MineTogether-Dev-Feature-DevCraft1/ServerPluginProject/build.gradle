plugins {
    id 'java'
    id("io.github.goooler.shadow") version "8.1.8"
   // id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'net.trysomethingdev'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "fancyplugins2.0.7"
        url = "https://repo.fancyplugins.de/releases"
    }
    maven {
        url 'https://maven.citizensnpcs.co/repo'

    }
    maven {
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'

        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }

    maven { url = 'https://jitpack.io' }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central'}

    mavenCentral()

}

dependencies {
    implementation 'org.reflections:reflections:0.10.2'
    implementation 'com.github.Gikkman:Java-Twirk:0.7.1'
    implementation 'org.jetbrains:annotations:23.0.0'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.mockito:mockito-core:3.12.4'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'
    compileOnly 'io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT'
    compileOnly("de.oliver:FancyNpcs:2.0.7")
    compileOnly 'com.denizenscript:denizen:1.3.1-SNAPSHOT'
    compileOnly('net.citizensnpcs:citizens-main:2.0.37-SNAPSHOT') {
        exclude group: '*', module: '*'
    }

}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

jar {
    destinationDirectory = file('C:\\Files\\Servers\\PaperServerDev6\\plugins')
} // Specify your desired output directory }

tasks {
    shadowJar {
        archiveClassifier.set("") // Ensures the final JAR is named without "-all"
        relocate "org.reflections", "net.trysomethingdev.devcraft.shadow.org.reflections"
        destinationDirectory = file('C:\\Files\\Servers\\PaperServerDev6\\plugins')
    }
}

test {
    useJUnitPlatform()
}

